Index: sphere-models/src/main/java/io/sphere/sdk/cartdiscounts/expansion/CartDiscountExpansionModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sphere-models/src/main/java/io/sphere/sdk/cartdiscounts/expansion/CartDiscountExpansionModel.java	(date 1453990198000)
+++ sphere-models/src/main/java/io/sphere/sdk/cartdiscounts/expansion/CartDiscountExpansionModel.java	(revision )
@@ -2,9 +2,14 @@
 
 import io.sphere.sdk.cartdiscounts.CartDiscount;
 import io.sphere.sdk.expansion.ExpansionModel;
+import io.sphere.sdk.expansion.ExpansionPathContainer;
 
-public class CartDiscountExpansionModel<T>  extends ExpansionModel<T> {
+public class CartDiscountExpansionModel<T> extends ExpansionModel<T> {
     public static CartDiscountExpansionModel<CartDiscount> of() {
         return new CartDiscountExpansionModel<>();
+    }
+
+    public ExpansionPathContainer<T> references() {
+        return expansionPath("references[*]");
     }
 }
Index: sphere-models/src/it/java/io/sphere/sdk/cartdiscounts/commands/CartDiscountInActualCartTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- sphere-models/src/it/java/io/sphere/sdk/cartdiscounts/commands/CartDiscountInActualCartTest.java	(date 1453990198000)
+++ sphere-models/src/it/java/io/sphere/sdk/cartdiscounts/commands/CartDiscountInActualCartTest.java	(revision )
@@ -1,6 +1,7 @@
 package io.sphere.sdk.cartdiscounts.commands;
 
 import io.sphere.sdk.cartdiscounts.*;
+import io.sphere.sdk.cartdiscounts.queries.CartDiscountByIdGet;
 import io.sphere.sdk.carts.Cart;
 import io.sphere.sdk.carts.LineItem;
 import io.sphere.sdk.carts.commands.CartUpdateCommand;
@@ -83,6 +84,12 @@
                                 .plusPredicates(m -> m.lineItems().discountedPricePerQuantity().quantity().is(lineItemWithDiscount.getDiscountedPricePerQuantity().get(0).getQuantity()))
                                 .plusPredicates(m -> m.id().is(cart.getId()));
                         assertThat(client().executeBlocking(cartQuery).head().get().getId()).as("line item queries").isEqualTo(cart.getId());
+
+                        //Cart Discount knows cart
+                        assertEventually(() -> {
+                            final CartDiscount loadedCartDiscount = client().executeBlocking(CartDiscountByIdGet.of(cartDiscount).withExpansionPaths(m -> m.references()));
+                            assertThat(loadedCartDiscount.getReferences()).hasSize(1);
+                        });
 
                         //clean up
                         client().executeBlocking(CartDiscountDeleteCommand.of(cartDiscount));
